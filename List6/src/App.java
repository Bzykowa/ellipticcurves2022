import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Scanner;

public class App {

    /**
     * Curve generated by Sagemath script, 20-bit p
     */
    private final static EllipticCurve TEST_CURVE = new EllipticCurve(new BigInteger("77782"),
            new BigInteger("401457"),
            new BigInteger("829561"), new BigInteger("830513"),
            new AffinePoint(new BigInteger("555159"), new BigInteger("373454")));

    public static void main(String[] args) throws Exception {

        // Assert that p mod 12 == 1
        assert TEST_CURVE.getP().mod(BigInteger.valueOf(12)).equals(BigInteger.ONE);

        // Assert that q is odd
        assert TEST_CURVE.getQ().testBit(0);

        // Generate with uniform distribution k value from [2, TEST_CURVE.Q - 1]
        SecureRandom random = new SecureRandom();
        int k = random.nextInt(2, TEST_CURVE.getQ().intValue());
        

    }
}
